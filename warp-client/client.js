// Generated by CoffeeScript 1.6.2
(function() {
  var $cls, $id, Deferred, WarpMessage, dfd, frame, handleCommand, handleNotify, parseUrl, socket, wsport,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $id = function() {
    return document.getElementById.apply(document, arguments);
  };

  $cls = function() {
    return document.getElementsByClassName.apply(document, arguments);
  };

  parseUrl = function(url) {
    var a;

    a = document.createElement('a');
    a.href = url;
    return {
      source: url,
      protocol: a.protocol.replace(':', ''),
      host: a.hostname,
      port: a.port,
      search: a.search,
      params: (function() {
        var ret, s, seg, segs, _i, _len;

        ret = {};
        segs = a.search.replace(/^\?/, '').split('&');
        for (_i = 0, _len = segs.length; _i < _len; _i++) {
          seg = segs[_i];
          s = seg.split('=');
          ret[s[0]] = s[1];
        }
        return ret;
      })(),
      file: (a.pathname.match(/\/([^\/?#]+)$/i) || ['', ''])[1],
      hash: a.hash.replace('#', ''),
      path: a.pathname.replace(/^([^\/])/, '/$1'),
      relative: (a.href.match(/tp:\/\/[^\/]+(.+)/) || ['', ''])[1],
      segments: a.pathname.replace(/^\//, '').split('/')
    };
  };

  Deferred = (function() {
    var nop;

    nop = (function() {});

    function Deferred() {
      this._done = __bind(this._done, this);      this._stack = [];
    }

    Deferred.prototype.wait = function(fn) {
      this._stack.push(nop);
      fn(this._done);
      return this;
    };

    Deferred.prototype._done = function() {
      return this._stack.pop()();
    };

    Deferred.prototype.then = function(fn) {
      this._stack.unshift(fn);
      this._stack.pop()();
      return this;
    };

    return Deferred;

  })();

  WarpMessage = (function() {
    function WarpMessage(json) {
      this.type = json.type || 'notify';
      this.name = json.name || 'default';
      this.data = json.data || {};
    }

    WarpMessage.prototype.encode = function() {
      return JSON.stringify({
        type: this.type,
        name: this.name,
        data: this.data
      });
    };

    return WarpMessage;

  })();

  wsport = parseUrl(location.href).params.wsport;

  socket = new WebSocket('ws://localhost:' + wsport + '/', "warp");

  frame = null;

  dfd = new Deferred;

  dfd.wait(function(done) {
    return socket.onopen = function() {
      return done();
    };
  }).wait(function(done) {
    return document.addEventListener("DOMContentLoaded", function() {
      frame = $id("warp-frame");
      return frame.onload = function() {
        done();
        return frame.onload = (function() {});
      };
    });
  }).then(function() {
    socket.onmessage = function(message) {
      var data;

      console.log(message);
      if (message.type === "message") {
        data = JSON.parse(message.data);
        switch (data.type) {
          case 'command':
            return handleCommand(data, frame);
          case 'notify':
            return handleNotify(data);
          default:
            return console.error("Unknown type \"" + data.type + "\" on message.data: " + data);
        }
      }
    };
    return socket.send(new WarpMessage({
      type: 'notify',
      name: 'start'
    }).encode());
  });

  socket.onclose = function() {
    return $id("closed-screen").setAttribute("style", "display:block;");
  };

  handleCommand = function(command, frame) {
    var docHeight, fdoc, inOffset, inScreen, inTop, point, screen, screenDelta, scrollTo, top;

    console.log(command.name);
    fdoc = frame.contentDocument;
    switch (command.name) {
      case "reload":
        return frame.src = frame.src;
      case "load":
      case "url":
        frame.src = command.args;
        return $id("loaded-url").value = command.args;
      case "renderHtml":
        console.log("renderHtml");
        fdoc.documentElement.innerHTML = command.args;
        return document.title = frame.contentDocument.title;
      case "scroll":
        point = command.data.split(" ");
        inTop = parseInt(point[0], 10);
        inOffset = parseInt(point[1], 10);
        inScreen = parseInt(point[2], 10);
        docHeight = fdoc.documentElement.scrollHeight || fdoc.body.scrollHeight;
        screen = fdoc.documentElement.clientHeight / docHeight * 100;
        top = (fdoc.documentElement.scrollTop || fdoc.body.scrollTop) / docHeight * 100;
        screenDelta = inScreen - screen;
        scrollTo = (inTop * docHeight / 100) + (screenDelta >= 0 ? screenDelta : 0) * docHeight / 100 * inOffset / 100;
        return frame.contentWindow.scrollTo(0, scrollTo);
      default:
        return console.error("Unknown command \"" + command.name + "\" on command: " + command);
    }
  };

  handleNotify = function(notify) {
    switch (notify.name) {
      case "clientId":
        return $id("client-id").textContent = notify.data;
      case "test":
        return false;
      case "start":
        return console.log("Server Accepted Client!");
      default:
        return console.error("Unknown notify \"" + notify.name + "\" on notify: " + notify);
    }
  };

}).call(this);
